{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Statistics/Statistics.module.css","components/Section/Section.jsx","components/Statistics/Notification.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Feedback/Feedback.jsx","App.js","index.js"],"names":["module","exports","Section","title","className","styles","Title","Notification","message","Statistics","values","total","positive","Grades","map","item","index","FeedbackList","FeedbackOptions","onLeaveFeedback","Button","options","name","type","FeedbackBtn","onClick","FeedbackItems","Feedback","useState","good","neutral","bad","state","setState","countTotalFeedback","names","Object","keys","entries","FeedbackForm","Math","round","countPositiveFeedbackPercentage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4IACAA,EAAOC,QAAU,CAAC,aAAe,sCAAsC,YAAc,uC,uDCArFD,EAAOC,QAAU,CAAC,aAAe,mC,qKCUlBC,EARC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjB,OACE,mCACE,oBAAIC,UAAWC,IAAOC,MAAtB,SAA8BH,O,gBCErBI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,6BAAKA,OCsCIC,EArCI,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7BC,EAASH,EAAOI,KAAI,SAACC,EAAMC,GAC/B,OACE,+BACGD,EAAK,GADR,IACY,qCAAQA,EAAK,QADhBC,MAKb,OACE,mCACGL,EACC,qBAAIP,UAAWC,IAAOY,aAAtB,UACGJ,EACD,wCAEE,qCAAQF,QAEV,oDAEE,qCAAQC,EAAR,aAIJ,cAAC,EAAD,CAAcJ,QAAS,yB,gBCFhBU,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBACnBC,EADkD,EAAdC,QACnBP,KAAI,SAACQ,GAC1B,OACE,wBAEEC,KAAK,SACLD,KAAMA,EACNlB,UAAWC,IAAOmB,YAClBC,QAAS,kBAAMN,EAAgBG,IALjC,SAOGA,GANIA,MAUX,OACE,mCACE,oBAAIlB,UAAWC,IAAOY,aAAtB,SACE,oBAAIb,UAAWC,IAAOqB,cAAtB,SAAsCN,SC2B/BO,EAxCE,WACf,MAA0BC,mBAAS,CAAEC,KAAM,EAAGC,QAAS,EAAGC,IAAK,IAA/D,mBAAOC,EAAP,KAAcC,EAAd,KASMC,EAAqB,WAGzB,OAF+BF,EAAvBH,KAAuBG,EAAjBF,QAAiBE,EAARD,KAYnBI,EAAQC,OAAOC,KAAKL,GACpBtB,EAAS0B,OAAOE,QAAQN,GAE9B,OACE,sBAAK5B,UAAWC,IAAOkC,aAAvB,UACE,cAAC,EAAD,CAASpC,MAAM,0BACf,cAAC,EAAD,CAAiBkB,QAASc,EAAOhB,gBA1BjB,SAACG,GACnBW,EAAS,2BACJD,GADG,kBAELV,EAAOU,EAAMV,GAAQ,QAwBtB,cAAC,EAAD,CAASnB,MAAM,eACf,cAAC,EAAD,CACEO,OAAQA,EACRC,MAAOuB,IACPtB,SAlBkC,WACtC,IAAQiB,EAASG,EAATH,KACFlB,EAAQuB,IAEd,OADiBM,KAAKC,MAAOZ,EAAOlB,EAAS,KAe/B+B,SC5BHC,MARf,WACE,OACE,qBAAKvC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3e5e5910.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FeedbackList\":\"FeedbackOptions_FeedbackList__1Yq4e\",\"FeedbackBtn\":\"FeedbackOptions_FeedbackBtn__1ChfS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FeedbackList\":\"Statistics_FeedbackList__2mG8G\"};","import styles from \"./Section.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title }) => {\n  return (\n    <>\n      <h2 className={styles.Title}>{title}</h2>\n    </>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","const Notification = ({ message }) => {\n  return (\n    <>\n      <h2>{message}</h2>\n    </>\n  );\n};\n\nexport default Notification;\n","import styles from \"./Statistics.module.css\";\nimport Notification from \"./Notification\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ values, total, positive }) => {\n  const Grades = values.map((item, index) => {\n    return (\n      <li key={index}>\n        {item[0]}:<span> {item[1]}</span>\n      </li>\n    );\n  });\n  return (\n    <>\n      {total ? (\n        <ul className={styles.FeedbackList}>\n          {Grades}\n          <li>\n            Total:\n            <span> {total}</span>\n          </li>\n          <li>\n            Positive feedback:\n            <span> {positive}%</span>\n          </li>\n        </ul>\n      ) : (\n        <Notification message={\"No feedback given\"} />\n      )}\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positive: PropTypes.number,\n};\n\nexport default Statistics;\n","import styles from \"./FeedbackOptions.module.css\";\n\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => {\n  const Button = options.map((name) => {\n    return (\n      <button\n        key={name}\n        type=\"button\"\n        name={name}\n        className={styles.FeedbackBtn}\n        onClick={() => onLeaveFeedback(name)}\n      >\n        {name}\n      </button>\n    );\n  });\n  return (\n    <>\n      <ul className={styles.FeedbackList}>\n        <li className={styles.FeedbackItems}>{Button}</li>\n      </ul>\n    </>\n  );\n};\n\nexport default FeedbackOptions;\n","import { useState } from \"react\";\nimport styles from \"./Feedback.module.css\";\nimport Section from \"../Section/Section\";\nimport Statistics from \"../Statistics/Statistics\";\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\n\nconst Feedback = () => {\n  const [state, setState] = useState({ good: 0, neutral: 0, bad: 0 });\n\n  const addFeedback = (name) => {\n    setState({\n      ...state,\n      [name]: state[name] + 1,\n    });\n  };\n\n  const countTotalFeedback = () => {\n    const { good, neutral, bad } = state;\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const { good } = state;\n    const total = countTotalFeedback();\n    const positive = Math.round((good / total) * 100);\n    return positive;\n  };\n\n  const names = Object.keys(state);\n  const values = Object.entries(state);\n\n  return (\n    <div className={styles.FeedbackForm}>\n      <Section title=\"Please leave feedback\" />\n      <FeedbackOptions options={names} onLeaveFeedback={addFeedback} />\n      <Section title=\"Statistics\" />\n      <Statistics\n        values={values}\n        total={countTotalFeedback()}\n        positive={countPositiveFeedbackPercentage()}\n      />\n    </div>\n  );\n};\n\nexport default Feedback;\n// class Feedback extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   countFeedback = (name) => {\n//     // e.preventDefault();\n//     // console.log(e.currentTarget.name);\n//     const currentState = name;\n//     this.setState((prevState) => ({\n//       [currentState]: prevState[currentState] + 1,\n//     }));\n//     this.countTotalFeedback();\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const { good } = this.state;\n//     const { countTotalFeedback } = this;\n//     const total = countTotalFeedback();\n//     const positive = Math.round((good / total) * 100);\n//     return positive;\n//   };\n\n//   render() {\n//     const {\n//       countFeedback,\n//       countTotalFeedback,\n//       countPositiveFeedbackPercentage,\n//     } = this;\n//     const { good, neutral, bad } = this.state;\n//     const onLeaveFeedback = { countFeedback };\n//     const names = Object.keys(this.state);\n//     return (\n//       <div className={styles.FeedbackForm}>\n//         <Section title=\"Please leave feedback\" />\n//         <FeedbackOptions options={names} onLeaveFeedback={countFeedback} />\n//         <Section title=\"Statistics\" />\n//         <Statistics\n//           good={good}\n//           neutral={neutral}\n//           bad={bad}\n//           total={countTotalFeedback()}\n//           positive={countPositiveFeedbackPercentage()}\n//         />\n//       </div>\n//     );\n//   }\n// }\n//\n","// import logo from './logo.svg';\nimport './App.css';\nimport Feedback from \"./components/Feedback/Feedback\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback  />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}